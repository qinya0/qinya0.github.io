<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[goweb_my-route]]></title>
    <url>%2F2017%2F10%2F28%2Fgoweb-my-route%2F</url>
    <content type="text"><![CDATA[my-routecode1234567891011121314151617181920212223242526272829303132333435363738394041package mainimport ( "fmt" "net/http")// new structtype MyMux struct &#123;&#125;/** * interface : * type Handler interface &#123; * ServeHTTP(ResponseWriter, *Request) * &#125; * HandlerFunc use this interface: * func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) &#123; * f(w, r) * &#125; * */func (p *MyMux) ServeHTTP(w http.ResponseWriter, r *http.Request) &#123; if r.URL.Path == "/" &#123; sayHelloRoute(w, r) return &#125; http.NotFound(w, r) return&#125;// HandlerFuncfunc sayHelloRoute(w http.ResponseWriter, r *http.Request) &#123; fmt.Fprintf(w, "Hello qinya0's route!")&#125;func main() &#123; mux := &amp;MyMux&#123;&#125; http.ListenAndServe(":9000", mux)&#125;]]></content>
      <categories>
        <category>goweb</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[goweb_hello-world]]></title>
    <url>%2F2017%2F10%2F28%2Fgoweb-hello-world%2F</url>
    <content type="text"><![CDATA[hello-world go version go1.8.4 linux/amd64 code123456789101112131415161718192021222324252627282930313233343536373839package mainimport ( "fmt" "log" "net/http" "strings")/** * http的httpHandleFunc函数 * 实现: type HandlerFunc func(ResponseWriter, *Request) */func sayHelloWorld(w http.ResponseWriter, r *http.Request) &#123; // 解析参数， r.ParseForm() // 打印各参数 fmt.Println(r.Form) fmt.Println("path", r.URL.Path) fmt.Println("scheme", r.URL.Scheme) fmt.Println(r.Form["url_long"]) for k, v := range r.Form &#123; fmt.Println("key:", k) fmt.Println("val:", strings.Join(v, "")) &#125; // 返回数据"Hello qinya0" fmt.Fprintf(w, "Hello qinya0!")&#125;func main() &#123; // set handle func for "/" http.HandleFunc("/", sayHelloWorld) // start listen port 9000 err := http.ListenAndServe(":9000", nil) if err != nil &#123; log.Fatal("ListenAndServe: ", err) &#125;&#125;]]></content>
      <categories>
        <category>goweb</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker-jenkins]]></title>
    <url>%2F2017%2F10%2F25%2Fdocker-jenkins%2F</url>
    <content type="text"><![CDATA[jenkins in docker ubuntu:16.04docker 1.13.0images: jenkins/jenkins:2.60.2jenkins插件 code1234567891011121314151617181920docker pull jenkins/jenkins:2.60.2# 建一个目录做挂载点mkdir -p /home/qy/jenkins/docker run -d -ti -p 10080:8080 -p 50000:50000 \-v /home/qy/jenkins:/home/paas \-v /var/run/docker.sock:/var/run/docker.sock -v /var/run/docker.sock \-v /etc/localtime:/etc/localtim:ro -v /etc/timezone:/etc/timezone:ro \--name qy-jenkins \-u root \jenkins/jenkins:2.60.2# 8080 端口是访问端口，50000是和子节点通信端口# 初始化密码，初次访问必须使用密码cat /home/qy/jenkins/secrets/initialAdminPassword# 我自己用不需要安全控制等等，关闭这些。进入jenkins，配置-安全设置： 关闭启用安全，关闭防止垮站点请求，开启CLT# 插件，将需要的插件拷贝到目录：/home/qy/jenkins/plugins,然后进入容器，重启jenkinsdocker exec -ti qy-jenkins bashjava -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -s http://localhost:8080 restart# over]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>registry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker-registry]]></title>
    <url>%2F2017%2F10%2F23%2Fdocker-registry%2F</url>
    <content type="text"><![CDATA[build private docker-registry build container for registry123456789101112# a file for registrymkdir /home/qy/registry# the file(/var/lib/registry) is images_save_filedocker run -d -ti --restart always -v /home/qy/registry:/var/lib/registry \-v /etc/localtime:/etc/localtime:ro -p 5000:5000 --name qy-registry registry:2# test the containerdocker pull hello-worlddocker tag hello-world localhost:5000/hello-worlddocker push localhost:5000/hello-worlddocker rmi localhost:5000/hello-worlddocker pull localhost:5000/hello-world 123456789101112131415# config docker-insecure-registrysudo vim /etc/default/docker# set the ip:port to config:DOCKER_OPTS="--insecure-registry 10.0.2.15:5000"# if you config the proxy for docker(export http_proxy="xxxxxxxx")# you should set that: export no_proxy="127.0.0.1,10.0.2.15:5000"# finally restart dockersudo sertvice docker restart# check the configsudo docker pull hello-worldsudo docker tag hello-world 10.0.2.15:5000/hello-worldsudo docker push 10.0.2.15:5000/hello-worldsudo docker rmi 10.0.2.15:5000/hello-worldsudo docker pull 10.0.2.15:5000/hello-world search images in registry1234# search all imagerscurl -X GET http://10.0.2.15:5000/v2/_catalog# search all tags of imagecurl -X GET http://10.0.2.15:5000/v2/hello-world/tags/list use passwd login registry123456789101112131415161718192021# a filemkdir -p /home/qy/registrycd /home/qy/registry# create a passwdmkdir /home/qy/registry/auth docker run --rm --entrypoint htpasswd registry:2 -Bbn qy-username qy-passwd &gt; auth/htpasswd...... more passwd# create container docker run -d -p 5001:5000 --restart always \ -e REGISTRY_STORAGE_REDIRECT_DISABLE=true -e REGISTRY_AUTH=htpasswd \ -e REGISTRY_AUTH_HTPASSWD_REALM=&quot;Registry Realm&quot; \ -e REGISTRY_AUTH_HTPASSWD_PATH=/var/lib/registry/auth/htpasswd \ -v /home/qy/registry/:/var/lib/registry \ --name qy-registry2 registry:2# add registry-url to docker&apos;s config# vim /etc/default/docker: balabalaservice docker restart# you can use uaer and passwd to login registrydocker login localhost:50001# login config shell for get all images and tags12345678910111213#!/bin/bashimage_names=$(curl -s http://localhost:5000/v2/_catalog | awk -F'[[]' '&#123;print $2&#125;' | awk -F'[]]' '&#123;print $1&#125;' | sed 's/\"//g' | sed 's/,/ /g')echo "all images: $&#123;image_names[@]&#125;"for image_name in $&#123;image_names[@]&#125;do image_tags=$(curl -s http://localhost:5000/v2/$&#123;image_name&#125;/tags/list | awk -F'[[]' '&#123;print $2&#125;' | awk -F'[]]' '&#123;print $1&#125;' | sed 's/\"//g' | sed 's/,/ /g') echo "$image_name" for image_tag in $&#123;image_tags[@]&#125; do echo " - $image_tag" donedone]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>registry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[install_docker]]></title>
    <url>%2F2017%2F10%2F23%2Finstall-docker%2F</url>
    <content type="text"><![CDATA[install docker in ubuntu ubuntu16.04 serverdocker 1.13.0 (the new is 17.0 ce) 1234567891011121314151617181920212223242526272829# updatesudo apt-get updatesudo apt-get install -y apt-transport-https ca-certificates # ready for dockersudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609sudo rm -rf /etc/apt/sources.list.d/dokcer.listsudo touch /etc/apt/sources.list.d/docker.listsudo chmod 777 /etc/apt/sources.list.d/docker.listsudo echo "deb https://apt.dockerproject.org/repo ubuntu-trusty main" &gt; /etc/apt/sources.list.d/docker.listsudo apt-get update# delete the old versionsudo apt-get purge lxc-dockersudo apt-get remove docker-engine# search all version of docker-enginesudo apt-cache policy docker-engine# instal docker(you can install the other version for your system)sudo apt-get install -y docker-engine=1.13.0-0~ubuntu-trusty# delete useless packagesudo rm -rf /var/lib/apt/lists/*# check dockersudo docker version]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello-world]]></title>
    <url>%2F2017%2F10%2F22%2Fhello-world%2F</url>
    <content type="text"><![CDATA[1 baidu 1whoami]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test hexo]]></title>
    <url>%2F2017%2F10%2F22%2Ftest-hexo%2F</url>
    <content type="text"><![CDATA[test hexo]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
